.features {
    grid-column: center-start / center-end;

    margin: 15rem 0;

    //If the browsers supports display grid,
    //And if it does, then we want the code below to execute
    @supports(display: grid) {
        display: grid;
        // grid-template-columns: repeat(3, 1fr);
        grid-template-columns: repeat(auto-fit, minmax(25rem, 1fr));
        gap: 6rem;
        align-items: start;
    }
}

.feature {
    float: left;//This float here, we don't have to reset it because it's actually ignored now that the feature selector is a grid item 
    width: 33.3333%;
    margin-bottom: 6rem;

    //So what gets ignored by CSS Grid and Flexbox are floats, display, inline-block, display: table-cell, and vertical-align altogether.
    @supports(display: grid) {
        width: auto;
        margin-bottom: 0;
    }

    /* 
     - We use grid not flexbox because if we're using flexbox it needs to specify the margins between the elements. With grids, we will only use grid gaps to give space between elements.

     - Grids donâ€™t only work for the big layout parts like some people say, but they can also be for very small components as long as they are two-dimensional. Then it makes  a lot of sense using grids for that.
    */
    display: grid;

    /*
     * min-content - We are using min-content becuase if we eventually wanted to change the width of the icon then automatically the width of this column would adjust without us having to change anything

     * 1fr - And then the rest of the grid, the second column, will simply occupy the rest

     * For the grid-template-rows, we don't really need to specify them because all we want to happen is them to be the size the content. Many times, we don't really define the rows, we just define the columns.
    */
    grid-template-columns: min-content 1fr;
    row-gap: 1.5rem;
    column-gap: 2.5rem;

    &__icon {
        fill: $color-primary;
        width: 4.5rem;
        height: 4.5rem;

        //The -1 only works with an explicit grid. So use span 2 and the -1 won't work becuase we didn't define grid-template-rows
        grid-row: 1 / span 2;
        transform: translateY(-1rem);
    }

    &__text {
        font-size: 1.7rem;
    }
}